package org.calacademy.video.sharklagoondual {  	import flash.desktop.NativeApplication;  	import flash.events.Event;	import flash.events.MouseEvent; 	import flash.net.SharedObject;  	import flash.net.URLRequest;	import flash.net.navigateToURL;		import flash.external.ExternalInterface;	import flash.events.FullScreenEvent;	import flash.display.StageDisplayState;		import org.casalib.util.LocationUtil;	import org.casalib.util.FlashVarUtil;	import org.casalib.util.StageReference;	import org.casalib.events.InactivityEvent;    	import org.calacademy.video.events.ContentEvent;	import org.calacademy.video.Config;	import org.calacademy.video.StreamingVideoControllerScreenGrab;	import org.calacademy.video.events.XmlEvent;	import org.calacademy.video.view.Logo;	import org.calacademy.video.sharklagoondual.view.Navbar;	import org.calacademy.video.view.FullScreenButton;		public class SharkLagoonDual extends StreamingVideoControllerScreenGrab {		private var _fullScreenButton:FullScreenButton;		private var _logo:Logo;		private var _navbar:Navbar;				public function SharkLagoonDual () {			super();						if (LocationUtil.isPlugin()) {				// get snapshot requests from ExternalInterface / JS				try {					if (ExternalInterface.available) {						ExternalInterface.addCallback("grab", _grab);					}				} catch (e:*) {					trace(e);				}			} else {				// add an artificial mechanism for testing in the IDE				if (LocationUtil.isIde()) {					//this.addEventListener(MouseEvent.MOUSE_UP, _grab);				}			}						_logo = new Logo();			this.addChild(_logo);			_logo.visible = (FlashVarUtil.getValue("logo") == 1); 						_stage = StageReference.getStage();			_stage.addEventListener(FullScreenEvent.FULL_SCREEN, _onFullScreenToggle);			}		override protected function _initConfig ():void {			Config.screenGrabConfigKey = "shark-lagoon";			Config.xml_path = "http://www.calacademy.org/webcams/sharks/xml/";			Config.shared_object_name = "sharkLagoonUserData";			Config.ga_account = "UA-6206955-6";			Config.msgDataError.body = "A network connection could not be found. Would you like to watch a prerecorded presentation?";  			Config.msgVideoError.body = "Your network connection appears to have been lost. Would you like to watch a prerecorded presentation?";			if (FlashVarUtil.hasKey("flat_video_path")) {				// from the Brightcove Media API				Config.flat_video_path = FlashVarUtil.getValue("flat_video_path");			} else {				Config.flat_video_path = "http://brightcove.vo.llnwd.net/e1/pd/19171091001/19171091001_2665853252001_1-9426622-36946991-2.flv";			}		}		override protected function _onData (e:XmlEvent):void {			_tracker.track("Network", "Data Loaded");			_timeout.stop();			try {				// navbar				var myXml:XML = this._data.getXml();				_navbar = new Navbar(myXml);				_size(_navbar);						} catch (e:Error) {				// invalid xml				trace(e);				_onDataError(null);				return;			}						// listen to each stream button			for each (var node:XML in myXml.cam) {				var prefix:String = node.prefix.toString();				_navbar.addEventListener(prefix, _onStreamSelect);			}						// display the navbar			this.addChild(_navbar);			setChildIndex(_navbar,1);			_navbar.y = Config.stageHeight - (_navbar.height/2) + 7;			// reset timeout per loaded config			_timeout.delay = Config.timeoutDuration;						// setup video if not already initialized			// by flat video			_initVideo();						// start listening for idle events			_initIdleEvents();						// we now have data			_isDataLoaded = true;			// if app has focus and not playing flat video,			// start loading initial stream			if (_isAppFocused) _playLastStream();						this.dispatchEvent(new XmlEvent(XmlEvent.PARSED));		}		override protected function _pollBuffering (e:Event):void {			if (_video.getPercentBuffered() > 0) {				this.removeEventListener(Event.ENTER_FRAME, _pollBuffering);				if (_navbar != null) _navbar.enabled = true;			}		}		override protected function _onStreamSelect (e:*, isFlat:Boolean = false):void {			if (_navbar != null) _navbar.enabled = false;			super._onStreamSelect(e, isFlat);		}		override protected function _onVideoError (e:ContentEvent = null, timeout:Boolean = false):void {			super._onVideoError(e, timeout);			if (_navbar != null) _navbar.reenableAll();		}		override protected function _onIdleTimeout (e:InactivityEvent):void {			super._onIdleTimeout(e);						if (_video == null) return;			if (!_video.isPlaying()) return; 						// reenable buttons			if (_navbar != null) _navbar.reenableAll();		}				override protected function _onAltToggle ():void {			super._onAltToggle();			_navbar.reenableAll();		}			override protected function _playLastStream (restart:Boolean = false):void {			// do nothing if video hasn't been initialized			if (!_isDataLoaded || _video == null) return;			// use previously accessed stream if available			var lastStream = SharedObject.getLocal(Config.shared_object_name).data.lastStream;						if (typeof(lastStream) == "string"				&& _data.numStreams > 1				&& _data.isValidStream(lastStream)) {				_navbar.select(lastStream, restart);							} else {				_navbar.select(0, restart);			}		}		override protected function _initExtraGraphics ():void {			if (FlashVarUtil.getValue("context") != "social") {				_fullScreenButton = new FullScreenButton();				_fullScreenButton.addEventListener(ContentEvent.FULLSCREEN, _onFullscreenSelect);				_fullScreenButton.x = Config.stageWidth - _fullScreenButton.width - 10;				_fullScreenButton.y = Config.stageHeight - _fullScreenButton.height - 10;				this.addChild(_fullScreenButton);							}		}				override protected function _setIsMobileDevice ():void {			_isMobileDevice = false;		}				private function _onFullscreenSelect (e:ContentEvent):void {			if (LocationUtil.isIde()) {				// for dev only				_onFullScreenToggle(null);			} else {				_stage.displayState = StageDisplayState.FULL_SCREEN;			}		}				override protected function _onFullScreenToggle (event:FullScreenEvent):void {			super._onFullScreenToggle(event);						try {				_fullScreenButton.visible = !this.fullscreen;				_logo.visible = this.fullscreen;								if (this.fullscreen) {					_navbar.y = stage.stageHeight - _navbar.height + 14;					_navbar.scaleX = 2;					_navbar.scaleY = 2;				} else {					_navbar.scaleX = 1;					_navbar.scaleY = 1;					_navbar.y = Config.stageHeight - (_navbar.height/2) + 7;				}								if (this.fullscreen) {					_logo.removeMouseListener();				}			} catch (e) {				trace(e);			}		}	}}